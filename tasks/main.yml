---

- name: Install postgresql
  become: true
  apt:
    pkg: 
      - postgresql-12 
      - postgresql-server-dev-12
  register: postgresql_installed

# - name: Ensure SELinux is set to enforcing mode

- name: Install pip for python3
  become: true
  apt:
    pkg: 
      - python3-pip 
      - python3-dev 
      - python3-psycopg2

- name: Install patroni[etcd]
  become: yes
  pip:
    name: patroni[etcd]

- name: Copy certificate (defined by directory) and look for individual certificates 
  become: yes
  copy:
    src: "{{ patroni_server_dir }}/{{ item }}"
    dest: "server.pem"
  with_items:
    - "{{ hostname }}.pem"
  when: patroni_server is not defined and patroni_server_dir is defined and patroni_tls
  register: patroni_tls_certs_found

- name: Copy certificate key (defined by directory) and look for individual certificates 
  become: yes
  copy:
    src: "{{ patroni_server_dir }}/{{ item }}"
    dest: "server-key.pem"
  with_items:
    - "{{ hostname }}-key.pem"
  when: patroni_server is not defined and patroni_server_dir is defined and patroni_tls
  register: patroni_tls_certs_found

- name: Copy certificates (defined by file) and look for a single certificate
  become: yes
  copy:
    src: "{{ item }}"
    dest: "server.pem"
  with_items:
    - "{{ patroni_server }}.pem"
  when: patroni_server is defined and patroni_server_dir is not defined and patroni_tls
  register: patroni_tls_certs_found

- name: Copy certificates (defined by file) and look for a single certificate
  become: yes
  copy:
    src: "{{ item }}"
    dest: "server-key.pem"
  with_items:
    - "{{ patroni_server }}-key.pem"
  when: patroni_server is defined and patroni_server_dir is not defined and patroni_tls
  register: patroni_tls_certs_found

- name: Copy certificates authority
  become: yes
  copy:
    src: "{{ item }}"
    dest: "ca.pem"
  with_items:
    - "{{ patroni_ca }}.pem"
  when: patroni_tls

- name: Make directory for configs and patroni_tls certificates
  become: yes
  file:
    path: /etc/patroni/
    state: directory

- name: Move ca certificate to "/etc/patroni/etcd-ca.crt"
  become: yes
  command: mv "ca.pem" /etc/patroni/ca.crt
  when: patroni_tls

- name: Move server certificate to "/etc/patroni/server.crt"
  become: yes
  command: mv "server.pem" /etc/patroni/server.crt
  when: patroni_tls

- name: Move server certificate key to "/etc/patroni/server.key"
  become: yes
  command: mv "server-key.pem" /etc/patroni/server.key
  when: patroni_tls

- name: Set perms for etcd-ca.crt
  become: yes
  file:
    path: /etc/patroni/ca.crt
    state: file
    mode: 700
  when: patroni_tls

- name: Set perms for server.crt
  become: yes
  file:
    path: /etc/patroni/server.crt
    state: file
    mode: 700
  when: patroni_tls

- name: Set perms for server.key
  become: yes
  file:
    path: /etc/patroni/server.key
    state: file
    mode: 700
  when: patroni_tls

- name: Create config
  become: yes
  template:
    src: ../templates/patroni.yml.j2
    dest: /etc/patroni/patroni.yml

# - name: Set perms for /data/patroni
#   become: yes
#   file:
#     path: /data/patroni
#     state: directory
#     owner: postgres
#     group: postgres
#     mode: 700

- name: Create data dir
  become: yes
  shell: mkdir -p /data/patroni

- name: Own data dir by postgres
  become: yes
  shell: chown postgres:postgres /data/patroni

- name: Set perms for data dir
  become: yes
  shell: chmod 700 /data/patroni

- name: Create config
  become: yes
  template:
    src: ../templates/patroni.service.j2
    dest: /etc/systemd/system/patroni.service

  ########################################
  ## START: Just run for initialization ##
  ########################################

- name: Enable and start patroni and postgresql on leader node
  become: true
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
    - patroni
    - postgresql
  when: inventory_hostname == postgres_leader_hostname

- name: Sleep for 3 seconds to give time to postgresql to fully start up
  wait_for:
    timeout: 3
  delegate_to: localhost

- name: Run "patronictl list" and register the results leader node
  become: yes
  shell: patronictl -c /etc/patroni/patroni.yml list
  register: members
  when: inventory_hostname == postgres_leader_hostname

- name: Output the registered results of "patronictl list" leader node
  debug: var=members.stdout_lines
  when: inventory_hostname == postgres_leader_hostname

- name: Edit "pg_hba.conf" on leader node
  become: true
  blockinfile:
        path: /data/patroni/pg_hba.conf
        block: |
          # Host for patroni
          host replication replicator 127.0.0.1/32 md5
          {% for item in groups[inventory_groupname] %}
          host replication replicator {{ hostvars[item]['ansible_' + patroni_interface].ipv4.address }}/0 md5
          {% endfor %}
          host all all 0.0.0.0/0 md5
  when: inventory_hostname == postgres_leader_hostname   

- name: Run "restart postgres" and register the results
  become: yes
  shell: patronictl -c /etc/patroni/patroni.yml restart postgres --force
  register: restart
  when: inventory_hostname == postgres_leader_hostname

- name: Output the registered results of "patronictl restart postgres --force"
  debug: var=restart.stdout_lines
  when: inventory_hostname == postgres_leader_hostname

- name: Restart patroni and postgresql
  become: true
  service:
    name: "{{ item }}"
    state: restarted
    enabled: true
  with_items:
    - patroni
    - postgresql
  when: inventory_hostname != postgres_leader_hostname

  ######################################
  ## END: Just run for initialization ##
  ######################################

- name: Run "patronictl list" and register the results leader node
  become: yes
  shell: patronictl -c /etc/patroni/patroni.yml list
  register: members
  when: inventory_hostname == groups[inventory_groupname][0]

- name: Output the registered results of "patronictl list" leader node
  debug: var=members.stdout_lines
  when: inventory_hostname == groups[inventory_groupname][0]